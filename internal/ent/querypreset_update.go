// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"exusiai.dev/roguestats-backend/internal/ent/predicate"
	"exusiai.dev/roguestats-backend/internal/ent/querypreset"
	"exusiai.dev/roguestats-backend/internal/ent/research"
)

// QueryPresetUpdate is the builder for updating QueryPreset entities.
type QueryPresetUpdate struct {
	config
	hooks    []Hook
	mutation *QueryPresetMutation
}

// Where appends a list predicates to the QueryPresetUpdate builder.
func (qpu *QueryPresetUpdate) Where(ps ...predicate.QueryPreset) *QueryPresetUpdate {
	qpu.mutation.Where(ps...)
	return qpu
}

// SetName sets the "name" field.
func (qpu *QueryPresetUpdate) SetName(s string) *QueryPresetUpdate {
	qpu.mutation.SetName(s)
	return qpu
}

// SetResearchID sets the "research_id" field.
func (qpu *QueryPresetUpdate) SetResearchID(s string) *QueryPresetUpdate {
	qpu.mutation.SetResearchID(s)
	return qpu
}

// SetWhere sets the "where" field.
func (qpu *QueryPresetUpdate) SetWhere(m map[string]interface{}) *QueryPresetUpdate {
	qpu.mutation.SetWhere(m)
	return qpu
}

// SetMapping sets the "mapping" field.
func (qpu *QueryPresetUpdate) SetMapping(s string) *QueryPresetUpdate {
	qpu.mutation.SetMapping(s)
	return qpu
}

// SetResearch sets the "research" edge to the Research entity.
func (qpu *QueryPresetUpdate) SetResearch(r *Research) *QueryPresetUpdate {
	return qpu.SetResearchID(r.ID)
}

// Mutation returns the QueryPresetMutation object of the builder.
func (qpu *QueryPresetUpdate) Mutation() *QueryPresetMutation {
	return qpu.mutation
}

// ClearResearch clears the "research" edge to the Research entity.
func (qpu *QueryPresetUpdate) ClearResearch() *QueryPresetUpdate {
	qpu.mutation.ClearResearch()
	return qpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qpu *QueryPresetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qpu.sqlSave, qpu.mutation, qpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qpu *QueryPresetUpdate) SaveX(ctx context.Context) int {
	affected, err := qpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qpu *QueryPresetUpdate) Exec(ctx context.Context) error {
	_, err := qpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qpu *QueryPresetUpdate) ExecX(ctx context.Context) {
	if err := qpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qpu *QueryPresetUpdate) check() error {
	if v, ok := qpu.mutation.Name(); ok {
		if err := querypreset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "QueryPreset.name": %w`, err)}
		}
	}
	if _, ok := qpu.mutation.ResearchID(); qpu.mutation.ResearchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QueryPreset.research"`)
	}
	return nil
}

func (qpu *QueryPresetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(querypreset.Table, querypreset.Columns, sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString))
	if ps := qpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qpu.mutation.Name(); ok {
		_spec.SetField(querypreset.FieldName, field.TypeString, value)
	}
	if value, ok := qpu.mutation.GetWhere(); ok {
		_spec.SetField(querypreset.FieldWhere, field.TypeJSON, value)
	}
	if value, ok := qpu.mutation.Mapping(); ok {
		_spec.SetField(querypreset.FieldMapping, field.TypeString, value)
	}
	if qpu.mutation.ResearchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   querypreset.ResearchTable,
			Columns: []string{querypreset.ResearchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(research.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qpu.mutation.ResearchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   querypreset.ResearchTable,
			Columns: []string{querypreset.ResearchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(research.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{querypreset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qpu.mutation.done = true
	return n, nil
}

// QueryPresetUpdateOne is the builder for updating a single QueryPreset entity.
type QueryPresetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueryPresetMutation
}

// SetName sets the "name" field.
func (qpuo *QueryPresetUpdateOne) SetName(s string) *QueryPresetUpdateOne {
	qpuo.mutation.SetName(s)
	return qpuo
}

// SetResearchID sets the "research_id" field.
func (qpuo *QueryPresetUpdateOne) SetResearchID(s string) *QueryPresetUpdateOne {
	qpuo.mutation.SetResearchID(s)
	return qpuo
}

// SetWhere sets the "where" field.
func (qpuo *QueryPresetUpdateOne) SetWhere(m map[string]interface{}) *QueryPresetUpdateOne {
	qpuo.mutation.SetWhere(m)
	return qpuo
}

// SetMapping sets the "mapping" field.
func (qpuo *QueryPresetUpdateOne) SetMapping(s string) *QueryPresetUpdateOne {
	qpuo.mutation.SetMapping(s)
	return qpuo
}

// SetResearch sets the "research" edge to the Research entity.
func (qpuo *QueryPresetUpdateOne) SetResearch(r *Research) *QueryPresetUpdateOne {
	return qpuo.SetResearchID(r.ID)
}

// Mutation returns the QueryPresetMutation object of the builder.
func (qpuo *QueryPresetUpdateOne) Mutation() *QueryPresetMutation {
	return qpuo.mutation
}

// ClearResearch clears the "research" edge to the Research entity.
func (qpuo *QueryPresetUpdateOne) ClearResearch() *QueryPresetUpdateOne {
	qpuo.mutation.ClearResearch()
	return qpuo
}

// Where appends a list predicates to the QueryPresetUpdate builder.
func (qpuo *QueryPresetUpdateOne) Where(ps ...predicate.QueryPreset) *QueryPresetUpdateOne {
	qpuo.mutation.Where(ps...)
	return qpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qpuo *QueryPresetUpdateOne) Select(field string, fields ...string) *QueryPresetUpdateOne {
	qpuo.fields = append([]string{field}, fields...)
	return qpuo
}

// Save executes the query and returns the updated QueryPreset entity.
func (qpuo *QueryPresetUpdateOne) Save(ctx context.Context) (*QueryPreset, error) {
	return withHooks(ctx, qpuo.sqlSave, qpuo.mutation, qpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qpuo *QueryPresetUpdateOne) SaveX(ctx context.Context) *QueryPreset {
	node, err := qpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qpuo *QueryPresetUpdateOne) Exec(ctx context.Context) error {
	_, err := qpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qpuo *QueryPresetUpdateOne) ExecX(ctx context.Context) {
	if err := qpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qpuo *QueryPresetUpdateOne) check() error {
	if v, ok := qpuo.mutation.Name(); ok {
		if err := querypreset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "QueryPreset.name": %w`, err)}
		}
	}
	if _, ok := qpuo.mutation.ResearchID(); qpuo.mutation.ResearchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QueryPreset.research"`)
	}
	return nil
}

func (qpuo *QueryPresetUpdateOne) sqlSave(ctx context.Context) (_node *QueryPreset, err error) {
	if err := qpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(querypreset.Table, querypreset.Columns, sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString))
	id, ok := qpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QueryPreset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, querypreset.FieldID)
		for _, f := range fields {
			if !querypreset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != querypreset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qpuo.mutation.Name(); ok {
		_spec.SetField(querypreset.FieldName, field.TypeString, value)
	}
	if value, ok := qpuo.mutation.GetWhere(); ok {
		_spec.SetField(querypreset.FieldWhere, field.TypeJSON, value)
	}
	if value, ok := qpuo.mutation.Mapping(); ok {
		_spec.SetField(querypreset.FieldMapping, field.TypeString, value)
	}
	if qpuo.mutation.ResearchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   querypreset.ResearchTable,
			Columns: []string{querypreset.ResearchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(research.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qpuo.mutation.ResearchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   querypreset.ResearchTable,
			Columns: []string{querypreset.ResearchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(research.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QueryPreset{config: qpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{querypreset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qpuo.mutation.done = true
	return _node, nil
}
