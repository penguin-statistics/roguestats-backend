// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"exusiai.dev/roguestats-backend/internal/ent/predicate"
	"exusiai.dev/roguestats-backend/internal/ent/querypreset"
	"exusiai.dev/roguestats-backend/internal/ent/research"
)

// QueryPresetQuery is the builder for querying QueryPreset entities.
type QueryPresetQuery struct {
	config
	ctx          *QueryContext
	order        []querypreset.OrderOption
	inters       []Interceptor
	predicates   []predicate.QueryPreset
	withResearch *ResearchQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QueryPresetQuery builder.
func (qpq *QueryPresetQuery) Where(ps ...predicate.QueryPreset) *QueryPresetQuery {
	qpq.predicates = append(qpq.predicates, ps...)
	return qpq
}

// Limit the number of records to be returned by this query.
func (qpq *QueryPresetQuery) Limit(limit int) *QueryPresetQuery {
	qpq.ctx.Limit = &limit
	return qpq
}

// Offset to start from.
func (qpq *QueryPresetQuery) Offset(offset int) *QueryPresetQuery {
	qpq.ctx.Offset = &offset
	return qpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qpq *QueryPresetQuery) Unique(unique bool) *QueryPresetQuery {
	qpq.ctx.Unique = &unique
	return qpq
}

// Order specifies how the records should be ordered.
func (qpq *QueryPresetQuery) Order(o ...querypreset.OrderOption) *QueryPresetQuery {
	qpq.order = append(qpq.order, o...)
	return qpq
}

// QueryResearch chains the current query on the "research" edge.
func (qpq *QueryPresetQuery) QueryResearch() *ResearchQuery {
	query := (&ResearchClient{config: qpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(querypreset.Table, querypreset.FieldID, selector),
			sqlgraph.To(research.Table, research.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, querypreset.ResearchTable, querypreset.ResearchColumn),
		)
		fromU = sqlgraph.SetNeighbors(qpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QueryPreset entity from the query.
// Returns a *NotFoundError when no QueryPreset was found.
func (qpq *QueryPresetQuery) First(ctx context.Context) (*QueryPreset, error) {
	nodes, err := qpq.Limit(1).All(setContextOp(ctx, qpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{querypreset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qpq *QueryPresetQuery) FirstX(ctx context.Context) *QueryPreset {
	node, err := qpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QueryPreset ID from the query.
// Returns a *NotFoundError when no QueryPreset ID was found.
func (qpq *QueryPresetQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = qpq.Limit(1).IDs(setContextOp(ctx, qpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{querypreset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qpq *QueryPresetQuery) FirstIDX(ctx context.Context) string {
	id, err := qpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QueryPreset entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QueryPreset entity is found.
// Returns a *NotFoundError when no QueryPreset entities are found.
func (qpq *QueryPresetQuery) Only(ctx context.Context) (*QueryPreset, error) {
	nodes, err := qpq.Limit(2).All(setContextOp(ctx, qpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{querypreset.Label}
	default:
		return nil, &NotSingularError{querypreset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qpq *QueryPresetQuery) OnlyX(ctx context.Context) *QueryPreset {
	node, err := qpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QueryPreset ID in the query.
// Returns a *NotSingularError when more than one QueryPreset ID is found.
// Returns a *NotFoundError when no entities are found.
func (qpq *QueryPresetQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = qpq.Limit(2).IDs(setContextOp(ctx, qpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{querypreset.Label}
	default:
		err = &NotSingularError{querypreset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qpq *QueryPresetQuery) OnlyIDX(ctx context.Context) string {
	id, err := qpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QueryPresets.
func (qpq *QueryPresetQuery) All(ctx context.Context) ([]*QueryPreset, error) {
	ctx = setContextOp(ctx, qpq.ctx, "All")
	if err := qpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*QueryPreset, *QueryPresetQuery]()
	return withInterceptors[[]*QueryPreset](ctx, qpq, qr, qpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qpq *QueryPresetQuery) AllX(ctx context.Context) []*QueryPreset {
	nodes, err := qpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QueryPreset IDs.
func (qpq *QueryPresetQuery) IDs(ctx context.Context) (ids []string, err error) {
	if qpq.ctx.Unique == nil && qpq.path != nil {
		qpq.Unique(true)
	}
	ctx = setContextOp(ctx, qpq.ctx, "IDs")
	if err = qpq.Select(querypreset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qpq *QueryPresetQuery) IDsX(ctx context.Context) []string {
	ids, err := qpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qpq *QueryPresetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qpq.ctx, "Count")
	if err := qpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qpq, querierCount[*QueryPresetQuery](), qpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qpq *QueryPresetQuery) CountX(ctx context.Context) int {
	count, err := qpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qpq *QueryPresetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qpq.ctx, "Exist")
	switch _, err := qpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qpq *QueryPresetQuery) ExistX(ctx context.Context) bool {
	exist, err := qpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QueryPresetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qpq *QueryPresetQuery) Clone() *QueryPresetQuery {
	if qpq == nil {
		return nil
	}
	return &QueryPresetQuery{
		config:       qpq.config,
		ctx:          qpq.ctx.Clone(),
		order:        append([]querypreset.OrderOption{}, qpq.order...),
		inters:       append([]Interceptor{}, qpq.inters...),
		predicates:   append([]predicate.QueryPreset{}, qpq.predicates...),
		withResearch: qpq.withResearch.Clone(),
		// clone intermediate query.
		sql:  qpq.sql.Clone(),
		path: qpq.path,
	}
}

// WithResearch tells the query-builder to eager-load the nodes that are connected to
// the "research" edge. The optional arguments are used to configure the query builder of the edge.
func (qpq *QueryPresetQuery) WithResearch(opts ...func(*ResearchQuery)) *QueryPresetQuery {
	query := (&ResearchClient{config: qpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qpq.withResearch = query
	return qpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QueryPreset.Query().
//		GroupBy(querypreset.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qpq *QueryPresetQuery) GroupBy(field string, fields ...string) *QueryPresetGroupBy {
	qpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QueryPresetGroupBy{build: qpq}
	grbuild.flds = &qpq.ctx.Fields
	grbuild.label = querypreset.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.QueryPreset.Query().
//		Select(querypreset.FieldName).
//		Scan(ctx, &v)
func (qpq *QueryPresetQuery) Select(fields ...string) *QueryPresetSelect {
	qpq.ctx.Fields = append(qpq.ctx.Fields, fields...)
	sbuild := &QueryPresetSelect{QueryPresetQuery: qpq}
	sbuild.label = querypreset.Label
	sbuild.flds, sbuild.scan = &qpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QueryPresetSelect configured with the given aggregations.
func (qpq *QueryPresetQuery) Aggregate(fns ...AggregateFunc) *QueryPresetSelect {
	return qpq.Select().Aggregate(fns...)
}

func (qpq *QueryPresetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qpq); err != nil {
				return err
			}
		}
	}
	for _, f := range qpq.ctx.Fields {
		if !querypreset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qpq.path != nil {
		prev, err := qpq.path(ctx)
		if err != nil {
			return err
		}
		qpq.sql = prev
	}
	return nil
}

func (qpq *QueryPresetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QueryPreset, error) {
	var (
		nodes       = []*QueryPreset{}
		_spec       = qpq.querySpec()
		loadedTypes = [1]bool{
			qpq.withResearch != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*QueryPreset).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &QueryPreset{config: qpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qpq.withResearch; query != nil {
		if err := qpq.loadResearch(ctx, query, nodes, nil,
			func(n *QueryPreset, e *Research) { n.Edges.Research = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qpq *QueryPresetQuery) loadResearch(ctx context.Context, query *ResearchQuery, nodes []*QueryPreset, init func(*QueryPreset), assign func(*QueryPreset, *Research)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*QueryPreset)
	for i := range nodes {
		fk := nodes[i].ResearchID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(research.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "research_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (qpq *QueryPresetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qpq.querySpec()
	_spec.Node.Columns = qpq.ctx.Fields
	if len(qpq.ctx.Fields) > 0 {
		_spec.Unique = qpq.ctx.Unique != nil && *qpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qpq.driver, _spec)
}

func (qpq *QueryPresetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(querypreset.Table, querypreset.Columns, sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString))
	_spec.From = qpq.sql
	if unique := qpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qpq.path != nil {
		_spec.Unique = true
	}
	if fields := qpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, querypreset.FieldID)
		for i := range fields {
			if fields[i] != querypreset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if qpq.withResearch != nil {
			_spec.Node.AddColumnOnce(querypreset.FieldResearchID)
		}
	}
	if ps := qpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qpq *QueryPresetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qpq.driver.Dialect())
	t1 := builder.Table(querypreset.Table)
	columns := qpq.ctx.Fields
	if len(columns) == 0 {
		columns = querypreset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qpq.sql != nil {
		selector = qpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qpq.ctx.Unique != nil && *qpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range qpq.predicates {
		p(selector)
	}
	for _, p := range qpq.order {
		p(selector)
	}
	if offset := qpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QueryPresetGroupBy is the group-by builder for QueryPreset entities.
type QueryPresetGroupBy struct {
	selector
	build *QueryPresetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qpgb *QueryPresetGroupBy) Aggregate(fns ...AggregateFunc) *QueryPresetGroupBy {
	qpgb.fns = append(qpgb.fns, fns...)
	return qpgb
}

// Scan applies the selector query and scans the result into the given value.
func (qpgb *QueryPresetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qpgb.build.ctx, "GroupBy")
	if err := qpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QueryPresetQuery, *QueryPresetGroupBy](ctx, qpgb.build, qpgb, qpgb.build.inters, v)
}

func (qpgb *QueryPresetGroupBy) sqlScan(ctx context.Context, root *QueryPresetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qpgb.fns))
	for _, fn := range qpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qpgb.flds)+len(qpgb.fns))
		for _, f := range *qpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QueryPresetSelect is the builder for selecting fields of QueryPreset entities.
type QueryPresetSelect struct {
	*QueryPresetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qps *QueryPresetSelect) Aggregate(fns ...AggregateFunc) *QueryPresetSelect {
	qps.fns = append(qps.fns, fns...)
	return qps
}

// Scan applies the selector query and scans the result into the given value.
func (qps *QueryPresetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qps.ctx, "Select")
	if err := qps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QueryPresetQuery, *QueryPresetSelect](ctx, qps.QueryPresetQuery, qps, qps.inters, v)
}

func (qps *QueryPresetSelect) sqlScan(ctx context.Context, root *QueryPresetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qps.fns))
	for _, fn := range qps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
