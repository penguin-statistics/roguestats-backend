// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"exusiai.dev/roguestats-backend/internal/ent/research"
)

// Research is the model entity for the Research schema.
type Research struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Schema holds the value of the "schema" field.
	Schema []byte `json:"schema,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResearchQuery when eager-loading is set.
	Edges        ResearchEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResearchEdges holds the relations/edges for other nodes in the graph.
type ResearchEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool

	namedEvents map[string][]*Event
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ResearchEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Research) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case research.FieldSchema:
			values[i] = new([]byte)
		case research.FieldID, research.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Research fields.
func (r *Research) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case research.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case research.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case research.FieldSchema:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field schema", values[i])
			} else if value != nil {
				r.Schema = *value
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Research.
// This includes values selected through modifiers, order, etc.
func (r *Research) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryEvents queries the "events" edge of the Research entity.
func (r *Research) QueryEvents() *EventQuery {
	return NewResearchClient(r.config).QueryEvents(r)
}

// Update returns a builder for updating this Research.
// Note that you need to call Research.Unwrap() before calling this method if this Research
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Research) Update() *ResearchUpdateOne {
	return NewResearchClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Research entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Research) Unwrap() *Research {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Research is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Research) String() string {
	var builder strings.Builder
	builder.WriteString("Research(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("schema=")
	builder.WriteString(fmt.Sprintf("%v", r.Schema))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Research) NamedEvents(name string) ([]*Event, error) {
	if r.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Research) appendNamedEvents(name string, edges ...*Event) {
	if r.Edges.namedEvents == nil {
		r.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		r.Edges.namedEvents[name] = []*Event{}
	} else {
		r.Edges.namedEvents[name] = append(r.Edges.namedEvents[name], edges...)
	}
}

// Researches is a parsable slice of Research.
type Researches []*Research
