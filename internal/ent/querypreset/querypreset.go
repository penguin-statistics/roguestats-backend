// Code generated by ent, DO NOT EDIT.

package querypreset

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the querypreset type in the database.
	Label = "query_preset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "query_preset_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldResearchID holds the string denoting the research_id field in the database.
	FieldResearchID = "research_id"
	// FieldWhere holds the string denoting the where field in the database.
	FieldWhere = "where"
	// FieldMapping holds the string denoting the mapping field in the database.
	FieldMapping = "mapping"
	// EdgeResearch holds the string denoting the research edge name in mutations.
	EdgeResearch = "research"
	// ResearchFieldID holds the string denoting the ID field of the Research.
	ResearchFieldID = "research_id"
	// Table holds the table name of the querypreset in the database.
	Table = "query_presets"
	// ResearchTable is the table that holds the research relation/edge.
	ResearchTable = "query_presets"
	// ResearchInverseTable is the table name for the Research entity.
	// It exists in this package in order to avoid circular dependency with the "research" package.
	ResearchInverseTable = "researches"
	// ResearchColumn is the table column denoting the research relation/edge.
	ResearchColumn = "research_id"
)

// Columns holds all SQL columns for querypreset fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldResearchID,
	FieldWhere,
	FieldMapping,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the QueryPreset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByResearchID orders the results by the research_id field.
func ByResearchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResearchID, opts...).ToFunc()
}

// ByMapping orders the results by the mapping field.
func ByMapping(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMapping, opts...).ToFunc()
}

// ByResearchField orders the results by research field.
func ByResearchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResearchStep(), sql.OrderByField(field, opts...))
	}
}
func newResearchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResearchInverseTable, ResearchFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResearchTable, ResearchColumn),
	)
}
