// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"exusiai.dev/roguestats-backend/internal/ent/event"
	"exusiai.dev/roguestats-backend/internal/ent/predicate"
	"exusiai.dev/roguestats-backend/internal/ent/querypreset"
	"exusiai.dev/roguestats-backend/internal/ent/research"
)

// ResearchUpdate is the builder for updating Research entities.
type ResearchUpdate struct {
	config
	hooks    []Hook
	mutation *ResearchMutation
}

// Where appends a list predicates to the ResearchUpdate builder.
func (ru *ResearchUpdate) Where(ps ...predicate.Research) *ResearchUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ResearchUpdate) SetName(s string) *ResearchUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetSchema sets the "schema" field.
func (ru *ResearchUpdate) SetSchema(b []byte) *ResearchUpdate {
	ru.mutation.SetSchema(b)
	return ru
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (ru *ResearchUpdate) AddEventIDs(ids ...string) *ResearchUpdate {
	ru.mutation.AddEventIDs(ids...)
	return ru
}

// AddEvents adds the "events" edges to the Event entity.
func (ru *ResearchUpdate) AddEvents(e ...*Event) *ResearchUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEventIDs(ids...)
}

// AddQueryPresetIDs adds the "query_presets" edge to the QueryPreset entity by IDs.
func (ru *ResearchUpdate) AddQueryPresetIDs(ids ...string) *ResearchUpdate {
	ru.mutation.AddQueryPresetIDs(ids...)
	return ru
}

// AddQueryPresets adds the "query_presets" edges to the QueryPreset entity.
func (ru *ResearchUpdate) AddQueryPresets(q ...*QueryPreset) *ResearchUpdate {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ru.AddQueryPresetIDs(ids...)
}

// Mutation returns the ResearchMutation object of the builder.
func (ru *ResearchUpdate) Mutation() *ResearchMutation {
	return ru.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (ru *ResearchUpdate) ClearEvents() *ResearchUpdate {
	ru.mutation.ClearEvents()
	return ru
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (ru *ResearchUpdate) RemoveEventIDs(ids ...string) *ResearchUpdate {
	ru.mutation.RemoveEventIDs(ids...)
	return ru
}

// RemoveEvents removes "events" edges to Event entities.
func (ru *ResearchUpdate) RemoveEvents(e ...*Event) *ResearchUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEventIDs(ids...)
}

// ClearQueryPresets clears all "query_presets" edges to the QueryPreset entity.
func (ru *ResearchUpdate) ClearQueryPresets() *ResearchUpdate {
	ru.mutation.ClearQueryPresets()
	return ru
}

// RemoveQueryPresetIDs removes the "query_presets" edge to QueryPreset entities by IDs.
func (ru *ResearchUpdate) RemoveQueryPresetIDs(ids ...string) *ResearchUpdate {
	ru.mutation.RemoveQueryPresetIDs(ids...)
	return ru
}

// RemoveQueryPresets removes "query_presets" edges to QueryPreset entities.
func (ru *ResearchUpdate) RemoveQueryPresets(q ...*QueryPreset) *ResearchUpdate {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ru.RemoveQueryPresetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResearchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResearchUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResearchUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResearchUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResearchUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := research.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Research.name": %w`, err)}
		}
	}
	return nil
}

func (ru *ResearchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(research.Table, research.Columns, sqlgraph.NewFieldSpec(research.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(research.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Schema(); ok {
		_spec.SetField(research.FieldSchema, field.TypeBytes, value)
	}
	if ru.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.EventsTable,
			Columns: []string{research.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEventsIDs(); len(nodes) > 0 && !ru.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.EventsTable,
			Columns: []string{research.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.EventsTable,
			Columns: []string{research.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.QueryPresetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.QueryPresetsTable,
			Columns: []string{research.QueryPresetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedQueryPresetsIDs(); len(nodes) > 0 && !ru.mutation.QueryPresetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.QueryPresetsTable,
			Columns: []string{research.QueryPresetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.QueryPresetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.QueryPresetsTable,
			Columns: []string{research.QueryPresetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{research.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResearchUpdateOne is the builder for updating a single Research entity.
type ResearchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResearchMutation
}

// SetName sets the "name" field.
func (ruo *ResearchUpdateOne) SetName(s string) *ResearchUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetSchema sets the "schema" field.
func (ruo *ResearchUpdateOne) SetSchema(b []byte) *ResearchUpdateOne {
	ruo.mutation.SetSchema(b)
	return ruo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (ruo *ResearchUpdateOne) AddEventIDs(ids ...string) *ResearchUpdateOne {
	ruo.mutation.AddEventIDs(ids...)
	return ruo
}

// AddEvents adds the "events" edges to the Event entity.
func (ruo *ResearchUpdateOne) AddEvents(e ...*Event) *ResearchUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEventIDs(ids...)
}

// AddQueryPresetIDs adds the "query_presets" edge to the QueryPreset entity by IDs.
func (ruo *ResearchUpdateOne) AddQueryPresetIDs(ids ...string) *ResearchUpdateOne {
	ruo.mutation.AddQueryPresetIDs(ids...)
	return ruo
}

// AddQueryPresets adds the "query_presets" edges to the QueryPreset entity.
func (ruo *ResearchUpdateOne) AddQueryPresets(q ...*QueryPreset) *ResearchUpdateOne {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ruo.AddQueryPresetIDs(ids...)
}

// Mutation returns the ResearchMutation object of the builder.
func (ruo *ResearchUpdateOne) Mutation() *ResearchMutation {
	return ruo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (ruo *ResearchUpdateOne) ClearEvents() *ResearchUpdateOne {
	ruo.mutation.ClearEvents()
	return ruo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (ruo *ResearchUpdateOne) RemoveEventIDs(ids ...string) *ResearchUpdateOne {
	ruo.mutation.RemoveEventIDs(ids...)
	return ruo
}

// RemoveEvents removes "events" edges to Event entities.
func (ruo *ResearchUpdateOne) RemoveEvents(e ...*Event) *ResearchUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEventIDs(ids...)
}

// ClearQueryPresets clears all "query_presets" edges to the QueryPreset entity.
func (ruo *ResearchUpdateOne) ClearQueryPresets() *ResearchUpdateOne {
	ruo.mutation.ClearQueryPresets()
	return ruo
}

// RemoveQueryPresetIDs removes the "query_presets" edge to QueryPreset entities by IDs.
func (ruo *ResearchUpdateOne) RemoveQueryPresetIDs(ids ...string) *ResearchUpdateOne {
	ruo.mutation.RemoveQueryPresetIDs(ids...)
	return ruo
}

// RemoveQueryPresets removes "query_presets" edges to QueryPreset entities.
func (ruo *ResearchUpdateOne) RemoveQueryPresets(q ...*QueryPreset) *ResearchUpdateOne {
	ids := make([]string, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ruo.RemoveQueryPresetIDs(ids...)
}

// Where appends a list predicates to the ResearchUpdate builder.
func (ruo *ResearchUpdateOne) Where(ps ...predicate.Research) *ResearchUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResearchUpdateOne) Select(field string, fields ...string) *ResearchUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Research entity.
func (ruo *ResearchUpdateOne) Save(ctx context.Context) (*Research, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResearchUpdateOne) SaveX(ctx context.Context) *Research {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResearchUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResearchUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResearchUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := research.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Research.name": %w`, err)}
		}
	}
	return nil
}

func (ruo *ResearchUpdateOne) sqlSave(ctx context.Context) (_node *Research, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(research.Table, research.Columns, sqlgraph.NewFieldSpec(research.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Research.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, research.FieldID)
		for _, f := range fields {
			if !research.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != research.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(research.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Schema(); ok {
		_spec.SetField(research.FieldSchema, field.TypeBytes, value)
	}
	if ruo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.EventsTable,
			Columns: []string{research.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !ruo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.EventsTable,
			Columns: []string{research.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.EventsTable,
			Columns: []string{research.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.QueryPresetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.QueryPresetsTable,
			Columns: []string{research.QueryPresetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedQueryPresetsIDs(); len(nodes) > 0 && !ruo.mutation.QueryPresetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.QueryPresetsTable,
			Columns: []string{research.QueryPresetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.QueryPresetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   research.QueryPresetsTable,
			Columns: []string{research.QueryPresetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Research{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{research.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
