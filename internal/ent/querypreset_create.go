// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"exusiai.dev/roguestats-backend/internal/ent/querypreset"
	"exusiai.dev/roguestats-backend/internal/ent/research"
)

// QueryPresetCreate is the builder for creating a QueryPreset entity.
type QueryPresetCreate struct {
	config
	mutation *QueryPresetMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (qpc *QueryPresetCreate) SetName(s string) *QueryPresetCreate {
	qpc.mutation.SetName(s)
	return qpc
}

// SetResearchID sets the "research_id" field.
func (qpc *QueryPresetCreate) SetResearchID(s string) *QueryPresetCreate {
	qpc.mutation.SetResearchID(s)
	return qpc
}

// SetWhere sets the "where" field.
func (qpc *QueryPresetCreate) SetWhere(m map[string]interface{}) *QueryPresetCreate {
	qpc.mutation.SetWhere(m)
	return qpc
}

// SetMapping sets the "mapping" field.
func (qpc *QueryPresetCreate) SetMapping(s string) *QueryPresetCreate {
	qpc.mutation.SetMapping(s)
	return qpc
}

// SetID sets the "id" field.
func (qpc *QueryPresetCreate) SetID(s string) *QueryPresetCreate {
	qpc.mutation.SetID(s)
	return qpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qpc *QueryPresetCreate) SetNillableID(s *string) *QueryPresetCreate {
	if s != nil {
		qpc.SetID(*s)
	}
	return qpc
}

// SetResearch sets the "research" edge to the Research entity.
func (qpc *QueryPresetCreate) SetResearch(r *Research) *QueryPresetCreate {
	return qpc.SetResearchID(r.ID)
}

// Mutation returns the QueryPresetMutation object of the builder.
func (qpc *QueryPresetCreate) Mutation() *QueryPresetMutation {
	return qpc.mutation
}

// Save creates the QueryPreset in the database.
func (qpc *QueryPresetCreate) Save(ctx context.Context) (*QueryPreset, error) {
	qpc.defaults()
	return withHooks(ctx, qpc.sqlSave, qpc.mutation, qpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qpc *QueryPresetCreate) SaveX(ctx context.Context) *QueryPreset {
	v, err := qpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qpc *QueryPresetCreate) Exec(ctx context.Context) error {
	_, err := qpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qpc *QueryPresetCreate) ExecX(ctx context.Context) {
	if err := qpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qpc *QueryPresetCreate) defaults() {
	if _, ok := qpc.mutation.ID(); !ok {
		v := querypreset.DefaultID()
		qpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qpc *QueryPresetCreate) check() error {
	if _, ok := qpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "QueryPreset.name"`)}
	}
	if v, ok := qpc.mutation.Name(); ok {
		if err := querypreset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "QueryPreset.name": %w`, err)}
		}
	}
	if _, ok := qpc.mutation.ResearchID(); !ok {
		return &ValidationError{Name: "research_id", err: errors.New(`ent: missing required field "QueryPreset.research_id"`)}
	}
	if _, ok := qpc.mutation.GetWhere(); !ok {
		return &ValidationError{Name: "where", err: errors.New(`ent: missing required field "QueryPreset.where"`)}
	}
	if _, ok := qpc.mutation.Mapping(); !ok {
		return &ValidationError{Name: "mapping", err: errors.New(`ent: missing required field "QueryPreset.mapping"`)}
	}
	if _, ok := qpc.mutation.ResearchID(); !ok {
		return &ValidationError{Name: "research", err: errors.New(`ent: missing required edge "QueryPreset.research"`)}
	}
	return nil
}

func (qpc *QueryPresetCreate) sqlSave(ctx context.Context) (*QueryPreset, error) {
	if err := qpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected QueryPreset.ID type: %T", _spec.ID.Value)
		}
	}
	qpc.mutation.id = &_node.ID
	qpc.mutation.done = true
	return _node, nil
}

func (qpc *QueryPresetCreate) createSpec() (*QueryPreset, *sqlgraph.CreateSpec) {
	var (
		_node = &QueryPreset{config: qpc.config}
		_spec = sqlgraph.NewCreateSpec(querypreset.Table, sqlgraph.NewFieldSpec(querypreset.FieldID, field.TypeString))
	)
	if id, ok := qpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := qpc.mutation.Name(); ok {
		_spec.SetField(querypreset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qpc.mutation.GetWhere(); ok {
		_spec.SetField(querypreset.FieldWhere, field.TypeJSON, value)
		_node.Where = value
	}
	if value, ok := qpc.mutation.Mapping(); ok {
		_spec.SetField(querypreset.FieldMapping, field.TypeString, value)
		_node.Mapping = value
	}
	if nodes := qpc.mutation.ResearchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   querypreset.ResearchTable,
			Columns: []string{querypreset.ResearchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(research.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResearchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QueryPresetCreateBulk is the builder for creating many QueryPreset entities in bulk.
type QueryPresetCreateBulk struct {
	config
	builders []*QueryPresetCreate
}

// Save creates the QueryPreset entities in the database.
func (qpcb *QueryPresetCreateBulk) Save(ctx context.Context) ([]*QueryPreset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qpcb.builders))
	nodes := make([]*QueryPreset, len(qpcb.builders))
	mutators := make([]Mutator, len(qpcb.builders))
	for i := range qpcb.builders {
		func(i int, root context.Context) {
			builder := qpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueryPresetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qpcb *QueryPresetCreateBulk) SaveX(ctx context.Context) []*QueryPreset {
	v, err := qpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qpcb *QueryPresetCreateBulk) Exec(ctx context.Context) error {
	_, err := qpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qpcb *QueryPresetCreateBulk) ExecX(ctx context.Context) {
	if err := qpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
