package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"exusiai.dev/roguestats-backend/internal/cursorutils"
	"exusiai.dev/roguestats-backend/internal/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	return r.Ent.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.Ent.Noders(ctx, ids)
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*ent.Event, error) {
	var decodedCursor string
	var err error
	if after != nil {
		decodedCursor, err = cursorutils.DecodeCursor(*after)
		if err != nil {
			return nil, err
		}
	}
	return r.EventService.GetPaginatedEvents(ctx, *researchID, *first, decodedCursor)
}

// Researches is the resolver for the researches field.
func (r *queryResolver) Researches(ctx context.Context) ([]*ent.Research, error) {
	return r.ResearchService.GetAllResearch(ctx)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) Login(ctx context.Context, input ent.LoginInput) (*ent.User, error) {
	return r.AuthService.AuthByLoginInput(ctx, input)
}

func (r *mutationResolver) CreateEvent(ctx context.Context, input ent.NewEvent) (*ent.Event, error) {
	return r.EventService.CreateEventFromInput(ctx, &input)
}

func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return r.AuthService.CreateUser(ctx, input)
}

func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	return r.AuthService.CurrentUser(ctx)
}

func (r *queryResolver) Research(ctx context.Context, id string) (*ent.Research, error) {
	return r.ResearchService.GetResearchByID(ctx, id)
}

func (r *queryResolver) GroupCount(ctx context.Context, input ent.GroupCountInput) (*ent.GroupCountResult, error) {
	groupCountResult, err := r.EventService.CalculateStats(ctx, input.ResearchID, input.FilterInput, input.ResultMappingInput)
	if err != nil {
		return nil, err
	}
	return groupCountResult, nil
}
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
