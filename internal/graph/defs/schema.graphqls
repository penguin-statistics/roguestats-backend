"""
The builtin Map type
"""
scalar Map

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
scalar Time
scalar Any

type Event implements Node {
  id: ID!
  createdAt: Time!
  userAgent: String!
  content: Map!
  user: User
  research: Research
}

type CategoryCount {
  category: Any!
  count: Int!
}

type GroupCountResult {
  results: [CategoryCount!]!
  total: Int!
}

input GroupCountInput {
  researchId: ID!
  filterInput: String!
  resultMappingInput: String!
}

"""
A connection to a list of items.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  The item at the end of the edge.
  """
  node: Event!
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Ordering options for Event connections
"""
input EventOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Events.
  """
  field: EventOrderField!
}

"""
Properties by which Event connections can be ordered.
"""
enum EventOrderField {
  ID
  CREATED_AT
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @goModel(model: "exusiai.dev/roguestats-backend/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

type Research implements Node {
  id: ID!
  name: String!
  schema: Map!
}

"""
A connection to a list of items.
"""
type ResearchConnection {
  """
  A list of edges.
  """
  edges: [ResearchEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ResearchEdge {
  """
  The item at the end of the edge.
  """
  node: Research!
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Ordering options for Research connections
"""
input ResearchOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Researches.
  """
  field: ResearchOrderField!
}

"""
Properties by which Research connections can be ordered.
"""
enum ResearchOrderField {
  ID
}

type User implements Node {
  id: ID!
  name: String!
  email: String! @private(userIdFieldName: "id")
  credential: String!
  attributes: Map
}

type Query {
  """
  Returns the current authenticated user.
  If the user is not authenticated, this returns null.
  """
  me: User

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!

  groupCount(input: GroupCountInput!): GroupCountResult!

  event(id: ID!): Event

  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Events returned from the connection.
    """
    orderBy: EventOrder
  ): EventConnection!

  research(id: ID!): Research

  researches(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Researches returned from the connection.
    """
    orderBy: ResearchOrder
  ): ResearchConnection!
}

input CreateEventInput {
  userAgent: String!
  content: Map!
  researchID: ID!
}

input CreateUserInput {
  name: String!
  email: String!
  attributes: Map
}

input LoginInput {
  email: String!
  password: String!
  turnstileResponse: String!
}

type Mutation {
  login(input: LoginInput!): User!
  createEvent(input: CreateEventInput!): Event!

  createUser(input: CreateUserInput!): User! @admin
}

directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @admin on FIELD_DEFINITION
directive @private(userIdFieldName: String = "userId") on FIELD_DEFINITION
