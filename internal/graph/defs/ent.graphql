directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Event implements Node {
  id: ID!
  createdAt: Time!
  userID: ID!
  researchID: ID!
  userAgent: String!
  content: Map!
  user: User!
  research: Research!
}
"""A connection to a list of items."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Event connections"""
input EventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Events."""
  field: EventOrderField!
}
"""Properties by which Event connections can be ordered."""
enum EventOrderField {
  ID
  CREATED_AT
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """research edge predicates"""
  hasResearch: Boolean
  hasResearchWith: [ResearchWhereInput!]
}
"""The builtin Map type"""
scalar Map
type Metric implements Node {
  id: ID!
  name: String!
  """The jsonpb filter to apply to the events"""
  filter: Map!
  """The mapping expr to apply to the events"""
  mapping: String!
}
"""A connection to a list of items."""
type MetricConnection {
  """A list of edges."""
  edges: [MetricEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MetricEdge {
  """The item at the end of the edge."""
  node: Metric
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Metric connections"""
input MetricOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Metrics."""
  field: MetricOrderField!
}
"""Properties by which Metric connections can be ordered."""
enum MetricOrderField {
  ID
}
"""
MetricWhereInput is used for filtering Metric objects.
Input was generated by ent.
"""
input MetricWhereInput {
  not: MetricWhereInput
  and: [MetricWhereInput!]
  or: [MetricWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """mapping field predicates"""
  mapping: String
  mappingNEQ: String
  mappingIn: [String!]
  mappingNotIn: [String!]
  mappingGT: String
  mappingGTE: String
  mappingLT: String
  mappingLTE: String
  mappingContains: String
  mappingHasPrefix: String
  mappingHasSuffix: String
  mappingEqualFold: String
  mappingContainsFold: String
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "exusiai.dev/roguestats-backend/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Events returned from the connection."""
    orderBy: EventOrder

    """Filtering options for Events returned from the connection."""
    where: EventWhereInput
  ): EventConnection!
  metrics(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Metrics returned from the connection."""
    orderBy: MetricOrder

    """Filtering options for Metrics returned from the connection."""
    where: MetricWhereInput
  ): MetricConnection!
  researches(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Researches returned from the connection."""
    orderBy: ResearchOrder

    """Filtering options for Researches returned from the connection."""
    where: ResearchWhereInput
  ): ResearchConnection!
}
type Research implements Node {
  id: ID!
  name: String!
  schema: Any!
}
"""A connection to a list of items."""
type ResearchConnection {
  """A list of edges."""
  edges: [ResearchEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ResearchEdge {
  """The item at the end of the edge."""
  node: Research
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Research connections"""
input ResearchOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Researches."""
  field: ResearchOrderField!
}
"""Properties by which Research connections can be ordered."""
enum ResearchOrderField {
  ID
}
"""
ResearchWhereInput is used for filtering Research objects.
Input was generated by ent.
"""
input ResearchWhereInput {
  not: ResearchWhereInput
  and: [ResearchWhereInput!]
  or: [ResearchWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  name: String!
  email: String! @private(userIdFieldName: "id")
  attributes: Map @private(userIdFieldName: "id")
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
