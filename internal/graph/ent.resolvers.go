package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"encoding/json"

	"entgo.io/contrib/entgql"
	"exusiai.dev/roguestats-backend/internal/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	return r.Ent.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.Ent.Noders(ctx, ids)
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.EventOrder, where *ent.EventWhereInput) (*ent.EventConnection, error) {
	return r.Ent.Event.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithEventOrder(orderBy),
			ent.WithEventFilter(where.Filter),
		)
}

// Metrics is the resolver for the metrics field.
func (r *queryResolver) Metrics(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.MetricOrder, where *ent.MetricWhereInput) (*ent.MetricConnection, error) {
	return r.Ent.Metric.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithMetricOrder(orderBy),
			ent.WithMetricFilter(where.Filter),
		)
}

// Researches is the resolver for the researches field.
func (r *queryResolver) Researches(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.ResearchOrder, where *ent.ResearchWhereInput) (*ent.ResearchConnection, error) {
	return r.Ent.Research.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithResearchOrder(orderBy),
			ent.WithResearchFilter(where.Filter),
		)
}

// Schema is the resolver for the schema field.
func (r *researchResolver) Schema(ctx context.Context, obj *ent.Research) (interface{}, error) {
	return json.RawMessage(obj.Schema), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Research returns ResearchResolver implementation.
func (r *Resolver) Research() ResearchResolver { return &researchResolver{r} }

// EventWhereInput returns EventWhereInputResolver implementation.
func (r *Resolver) EventWhereInput() EventWhereInputResolver { return &eventWhereInputResolver{r} }

type queryResolver struct{ *Resolver }
type researchResolver struct{ *Resolver }
type eventWhereInputResolver struct{ *Resolver }
