package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"entgo.io/ent/dialect/sql"

	"exusiai.dev/roguestats-backend/internal/ent"
	"exusiai.dev/roguestats-backend/internal/ent/predicate"
	"exusiai.dev/roguestats-backend/internal/model"
	"exusiai.dev/roguestats-backend/internal/x/jsonpd"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*ent.User, error) {
	return r.AuthService.AuthByLoginInput(ctx, input)
}

// RequestPasswordReset is the resolver for the requestPasswordReset field.
func (r *mutationResolver) RequestPasswordReset(ctx context.Context, input model.RequestPasswordResetInput) (bool, error) {
	return r.AuthService.RequestPasswordReset(ctx, input)
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.ResetPasswordInput) (bool, error) {
	return r.AuthService.ResetPassword(ctx, input)
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.CreateEventInput) (*ent.Event, error) {
	return r.EventService.CreateEventFromInput(ctx, input)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*ent.User, error) {
	return r.AuthService.CreateUser(ctx, input)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	return r.AuthService.CurrentUser(ctx)
}

// GroupCount is the resolver for the groupCount field.
func (r *queryResolver) GroupCount(ctx context.Context, input model.GroupCountInput) (*model.GroupCountResult, error) {
	return r.EventService.CalculateStats(ctx, input.ResearchID, input.FilterInput, input.ResultMappingInput)
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*ent.Event, error) {
	return r.Ent.Event.Get(ctx, id)
}

// Research is the resolver for the research field.
func (r *queryResolver) Research(ctx context.Context, id string) (*ent.Research, error) {
	return r.Ent.Research.Get(ctx, id)
}

// ContentJSONPredicate is the resolver for the contentJsonPredicate field.
func (r *eventWhereInputResolver) ContentJSONPredicate(ctx context.Context, obj *ent.EventWhereInput, data map[string]any) error {
	if obj == nil || data == nil {
		return nil
	}
	sqlStr, err := jsonpd.Predicate(data).SQL("content")
	if err != nil {
		return err
	}
	// func(s *Selector) {
	// 	s.Where(EQ(s.C(name), v))
	// }
	obj.AddPredicates(predicate.Event(func(s *sql.Selector) {
		s.Where((&sql.Predicate{}).Append(func(b *sql.Builder) {
			b.WriteString(sqlStr)
		}))
	}))
	return nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
